name: Terraform GKE Delivery

"on":
  push:
    branches:
      - develop
      - staging
      - main
    paths:
      - "envs/**"
      - "modules/**"
      - ".github/workflows/terraform-gke.yml"
  pull_request:
    branches:
      - develop
      - staging
      - main
    paths:
      - "envs/**"
      - "modules/**"
      - ".github/workflows/terraform-gke.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: Target environment
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  id-token: write

concurrency:
  group: terraform-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: dev
            branch: develop
            working_directory: envs/dev
            backend_prefix: state/dev
          - name: staging
            branch: staging
            working_directory: envs/staging
            backend_prefix: state/staging
          - name: prod
            branch: main
            working_directory: envs/prod
            backend_prefix: state/prod
    environment: ${{ matrix.name }}
    concurrency:
      group: terraform-${{ matrix.name }}
      cancel-in-progress: false
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.working_directory }}
    env:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"
      TF_CLI_ARGS_plan: "-lock-timeout=300s"
      TF_CLI_ARGS_apply: "-lock-timeout=300s"
      RUN_CONDITION: >-
        ${{
          (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.name) ||
          (github.event_name == 'push' && github.ref == format('refs/heads/{0}', matrix.branch)) ||
          (github.event_name == 'pull_request' && github.base_ref == matrix.branch)
        }}
    steps:
      - name: Checkout repository
        if: env.RUN_CONDITION == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        if: env.RUN_CONDITION == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      - name: Authenticate to Google Cloud
        if: env.RUN_CONDITION == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure gcloud SDK
        if: env.RUN_CONDITION == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Terraform fmt
        if: env.RUN_CONDITION == 'true'
        run: terraform fmt -recursive -check

      - name: Terraform init
        if: env.RUN_CONDITION == 'true'
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        run: terraform init -input=false -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="prefix=${{ matrix.backend_prefix }}"

      - name: Terraform validate
        if: env.RUN_CONDITION == 'true'
        run: terraform validate

      - name: Terraform plan
        if: env.RUN_CONDITION == 'true'
        id: plan
        run: |
          set +e
          terraform plan -input=false -detailed-exitcode -out=plan.tfplan
          exit_code=$?
          set -e
          if [ "${exit_code}" -ne 0 ] && [ "${exit_code}" -ne 2 ]; then
            exit "${exit_code}"
          fi
          echo "exit_code=${exit_code}" >> "${GITHUB_OUTPUT}"

      - name: Upload plan
        if: env.RUN_CONDITION == 'true' && github.event_name == 'pull_request' && steps.plan.outputs.exit_code == '2'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.name }}
          path: ${{ matrix.working_directory }}/plan.tfplan

      - name: Comment plan on PR
        if: env.RUN_CONDITION == 'true' && github.event_name == 'pull_request' && steps.plan.outputs.exit_code == '2'
        uses: actions/github-script@v7
        with:
          script: |
            const workspace = '${{ matrix.working_directory }}';
            const planFile = `${workspace}/plan.tfplan`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan - ${{ matrix.name }}\n\nPlan output available in artifacts: terraform-plan-${{ matrix.name }}`
            });

      - name: Terraform apply
        if: >-
          env.RUN_CONDITION == 'true' &&
          steps.plan.outputs.exit_code == '2' && (
            (github.event_name == 'push' && github.ref == format('refs/heads/{0}', matrix.branch)) ||
            (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.name)
          )
        run: terraform apply -input=false -auto-approve plan.tfplan

      - name: Cleanup plan
        if: always() && env.RUN_CONDITION == 'true'
        run: rm -f plan.tfplan
