name: ArgoCD Sync

on:
  push:
    branches:
      - main
      - staging
      - develop
    paths:
      - 'k8s/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  argocd-sync:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          # Get cluster info from Terraform state
          CLUSTER_NAME="aks-aksproject-${{ needs.determine-environment.outputs.environment }}-eastus"
          RESOURCE_GROUP="rg-aksproject-${{ needs.determine-environment.outputs.environment }}-eastus"
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --overwrite-existing

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Apply ArgoCD Applications
        run: |
          # Apply all ArgoCD manifests
          kubectl apply -f k8s/argocd/bootstrap/
          kubectl apply -f k8s/argocd/apps/${{ needs.determine-environment.outputs.environment }}/

      - name: Wait for Applications to Sync
        run: |
          echo "Waiting for ArgoCD applications to sync..."
          sleep 30
          kubectl get applications -n argocd

      - name: Summary
        run: |
          echo "## ArgoCD Sync Complete! ðŸ”„" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Applications:**" >> $GITHUB_STEP_SUMMARY
          kubectl get applications -n argocd --no-headers | awk '{print "- " $1 " (" $3 ")"}' >> $GITHUB_STEP_SUMMARY
